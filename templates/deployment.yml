---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: armory-agent
    app.kubernetes.io/name: armory-agent
    cluster: {{ .Release.Name | lower }}-cluster
  name: {{ .Release.Name | lower }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: armory-agent
      cluster: {{ .Release.Name | lower }}-cluster
  template:
    metadata:
      labels:
        app: armory-agent
        app.kubernetes.io/name: armory-agent
        cluster: {{ .Release.Name | lower }}-cluster
{{- if .Values.podLabels}}
      {{- range $key, $value := .Values.podLabels }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
{{- end }}
{{- if .Values.podAnnotations}}
      annotations:
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
{{- end }}
    spec:
      {{- if (eq $.Values.mode "agent") }}
      serviceAccount: {{ .Release.Name | lower }}-sa
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      containers:
      {{- if .Values.image}}
      - image: {{ .Values.image }}
      {{- else }}
      - image: armory/agent-k8s:{{ .Chart.AppVersion }}
      {{- end }}
        imagePullPolicy: IfNotPresent
        name: agent
        env:
        {{- if .Values.cloudEnabled }}
        - name: ARMORY_HUB
          value: "true"
        {{- end }}
        {{- with .Values.env }}
        {{- /* Unfortunately this loop can't validate that the map has a name
               and value structure. If name or value is mispelled, then it will
               fail silently and create an invalid env structure.
           */}}
        {{- range . }}
        - name: {{ index . "name" }}
          value: {{ index . "value" }}
        {{- end }}
        {{- end }}
        ports:
          - name: health
            containerPort: 8082
            protocol: TCP
          - name: metrics
            containerPort: 8008
            protocol: TCP
        readinessProbe:
          httpGet:
            port: health
            path: /health
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /opt/armory/config
          name: volume-{{ .Release.Name | lower }}-config
        {{- with .Values.accounts }}
        - mountPath: /kubeconfigfiles
          readOnly: true
          name: {{ template "kubeconfig-volume-name" $.Release }}
        {{- end }}
      restartPolicy: Always
      volumes:
      - name: volume-{{ .Release.Name | lower }}-config
        configMap:
          name: {{ .Release.Name | lower }}-config
      {{- with $.Values.accounts }}
      - name: {{ template "kubeconfig-volume-name" $.Release }}
        secret:
          secretName: {{ template "kubeconfig-secret-name" $.Release }}
      {{- end }}
